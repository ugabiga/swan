package {{.PackageName}}

import (
	"log/slog"
	"net/http"

	"github.com/labstack/echo/v4"
)

type Handler struct {
	prefix string
	logger *slog.Logger
}

func NewHandler(
	logger *slog.Logger,
) *Handler {
	return &Handler{
		prefix: "/{{.HandlerName}}",
		logger: logger,
	}
}

func (h *Handler) SetRoutes(e *echo.Group) {
	e.GET(h.prefix, h.List)
	e.GET(h.prefix+"/:id", h.One)
	e.POST(h.prefix, h.Create)
	e.PUT(h.prefix+"/:id", h.Edit)
	e.DELETE(h.prefix+"/:id", h.Delete)
}

// List godoc
//
//	@Summary		List
//	@Description	List
//	@Tags			{{.HandlerName}}
//	@Accept			json
//	@Produce		json
//	@Param			limit		query		int		false	"Limit"
//	@Param			offset		query		int		false	"Offset"
//	@Success		200			{object}	ListResp
//	@Router			{{.RoutePrefix}}/{{.HandlerName}} [get]
func (h *Handler) List(c echo.Context) error {
	var req ListReq 
	if err := c.Bind(&req); err != nil {
		return err
	}

	return c.JSON(http.StatusOK, ListResp{})
}

type ListReq struct {
	Limit  int `query:"limit"`
	Offset int `query:"offset"`
}

type ListResp struct {
}

// One godoc
//
//	@Summary		One
//	@Description	One
//	@Tags			{{.HandlerName}}
//	@Accept			json
//	@Produce		json
//	@Param			id			path		string	true	"ID"
//	@Success		200			{object}	ListResp
//	@Router			{{.RoutePrefix}}/{{.HandlerName}}/{id} [get]
func (h *Handler) One(c echo.Context) error {
	var req OneReq
	if err := c.Bind(&req); err != nil {
		return err
	}

	return c.JSON(http.StatusOK, OneResp{})
}

type OneReq struct {
	ID  string `param:"id"`
}

type OneResp struct {
}

// Create godoc
//
//	@Summary		Create
//	@Description	Create
//	@Tags			{{.HandlerName}}
//	@Accept			json
//	@Produce		json
//	@Param			req	body		CreateReq	true	"Request"
//	@Success		200	{object}	CreateResp
//	@Router			{{.RoutePrefix}}/{{.HandlerName}} [post]
func (h *Handler) Create(c echo.Context) error {
	var req CreateReq
	if err := c.Bind(&req); err != nil {
		return err
	}

	return c.JSON(http.StatusOK, CreateResp{})
}

type CreateReq struct {
	Name string `json:"name"`
}

type CreateResp struct {
}

// Edit godoc
//
//	@Summary		Edit
//	@Description	Edit
//	@Tags			{{.HandlerName}}
//	@Accept			json
//	@Produce		json
//	@Param			id	path		string	true	"ID"
//	@Param			req	body		EditReq	true	"Request"
//	@Success		200	{object}	EditResp
//	@Router			{{.RoutePrefix}}/{{.HandlerName}}/{id} [put]
func (h *Handler) Edit(c echo.Context) error {
	var req EditReq
	if err := c.Bind(&req); err != nil {
		return err
	}

	return c.JSON(http.StatusOK, EditResp{})
}

type EditReq struct {
	ID   string `param:"id"`
	Name string `json:"name"`
}

type EditResp struct {
}

// Delete godoc
//
//	@Summary		Delete
//	@Description	Delete
//	@Tags			{{.HandlerName}}
//	@Accept			json
//	@Produce		json
//	@Param			id	path		string		true	"ID"
//	@Param			req	body		DeleteReq	true	"Request"
//	@Success		200	{object}	DeleteResp
//	@Router			{{.RoutePrefix}}/{{.HandlerName}}/{id} [delete]
func (h *Handler) Delete(c echo.Context) error {
	var req DeleteReq
	if err := c.Bind(&req); err != nil {
		return err
	}

	return c.JSON(http.StatusOK, DeleteResp{})
}

type DeleteReq struct {
	ID   string `param:"id"`
	Name string `json:"name"`
}

type DeleteResp struct {
}
